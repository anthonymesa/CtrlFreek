package CtrlFreek;

import java.awt.Cursor;
import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JFileChooser;
import java.io.File;
import java.net.URI;
import java.net.URISyntaxException;

/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

/**
 *
 * @author admesa
 */
public class CtrlFreek extends javax.swing.JFrame {

    String path;
    char drive_letter;
    File working_directory;
    Runtime rt = Runtime.getRuntime();
    /**
     * Creates new form NewJFrame
     */
    public CtrlFreek() throws URISyntaxException {
        path = new File(CtrlFreek.class.getProtectionDomain().getCodeSource().getLocation().toURI()).getPath();
        drive_letter = path.charAt(0);
        working_directory = null;
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        file_chooser_dialogue = new javax.swing.JDialog();
        file_chooser = new javax.swing.JFileChooser();
        logo_label = new javax.swing.JLabel();
        get_directory = new javax.swing.JButton();
        directory_display = new javax.swing.JTextField();
        control_panel = new javax.swing.JPanel();
        compile_button = new javax.swing.JButton();
        java_project = new javax.swing.JRadioButton();
        cpp_project = new javax.swing.JRadioButton();
        java_run = new javax.swing.JRadioButton();
        cpp_compile = new javax.swing.JRadioButton();
        java_jar = new javax.swing.JRadioButton();
        compile_label = new javax.swing.JLabel();
        project_label = new javax.swing.JLabel();
        project_button = new javax.swing.JButton();
        terminal_wrapper = new javax.swing.JScrollPane();
        terminal = new javax.swing.JTextArea();

        file_chooser_dialogue.setAlwaysOnTop(true);

        file_chooser.setApproveButtonText("Set");
        file_chooser.setFileSelectionMode(javax.swing.JFileChooser.DIRECTORIES_ONLY);

        javax.swing.GroupLayout file_chooser_dialogueLayout = new javax.swing.GroupLayout(file_chooser_dialogue.getContentPane());
        file_chooser_dialogue.getContentPane().setLayout(file_chooser_dialogueLayout);
        file_chooser_dialogueLayout.setHorizontalGroup(
            file_chooser_dialogueLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(file_chooser_dialogueLayout.createSequentialGroup()
                .addComponent(file_chooser, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );
        file_chooser_dialogueLayout.setVerticalGroup(
            file_chooser_dialogueLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(file_chooser_dialogueLayout.createSequentialGroup()
                .addComponent(file_chooser, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("CtrlFreek");
        setBackground(new java.awt.Color(102, 102, 102));
        setMinimumSize(new java.awt.Dimension(500, 500));

        logo_label.setBackground(new java.awt.Color(43, 43, 43));
        logo_label.setFont(new java.awt.Font("Monospac821 BT", 0, 14)); // NOI18N
        logo_label.setForeground(new java.awt.Color(255, 102, 102));
        logo_label.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        logo_label.setIcon(new javax.swing.ImageIcon(getClass().getResource("/CtrlFreek/Artboard 1.png"))); // NOI18N
        logo_label.setToolTipText("");
        logo_label.setAlignmentY(0.0F);
        logo_label.setFocusable(false);
        logo_label.setHorizontalTextPosition(javax.swing.SwingConstants.LEFT);
        logo_label.setOpaque(true);
        logo_label.setPreferredSize(new java.awt.Dimension(1000, 54));

        get_directory.setBackground(new java.awt.Color(255, 102, 153));
        get_directory.setIcon(new javax.swing.ImageIcon(getClass().getResource("/CtrlFreek/baseline_folder_open_black_18dp.png"))); // NOI18N
        get_directory.setToolTipText("");
        get_directory.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                get_directoryMouseClicked(evt);
            }
        });

        directory_display.setEditable(false);
        directory_display.setHorizontalAlignment(javax.swing.JTextField.LEFT);
        directory_display.setText("Select Working Directory...");
        directory_display.setToolTipText("");

        compile_button.setBackground(new java.awt.Color(255, 102, 102));
        compile_button.setText("Control");
        compile_button.setOpaque(false);
        compile_button.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                compile_buttonMouseClicked(evt);
            }
        });

        java_project.setText("Java");
        java_project.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                java_projectMouseClicked(evt);
            }
        });

        cpp_project.setText("C++");
        cpp_project.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                cpp_projectMouseClicked(evt);
            }
        });

        java_run.setText("Java Run");
        java_run.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                java_runMouseClicked(evt);
            }
        });

        cpp_compile.setText("C++");
        cpp_compile.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                cpp_compileMouseClicked(evt);
            }
        });

        java_jar.setText("Java .jar");
        java_jar.setToolTipText("");
        java_jar.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                java_jarMouseClicked(evt);
            }
        });

        compile_label.setText("Compile");

        project_label.setText("Project Type");

        project_button.setText("New Project");
        project_button.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                project_buttonMouseClicked(evt);
            }
        });

        javax.swing.GroupLayout control_panelLayout = new javax.swing.GroupLayout(control_panel);
        control_panel.setLayout(control_panelLayout);
        control_panelLayout.setHorizontalGroup(
            control_panelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(compile_button, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(compile_label, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(project_label, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(java_project, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(cpp_project, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(project_button, javax.swing.GroupLayout.DEFAULT_SIZE, 97, Short.MAX_VALUE)
            .addComponent(java_jar, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(control_panelLayout.createSequentialGroup()
                .addComponent(java_run, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
            .addComponent(cpp_compile, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        control_panelLayout.setVerticalGroup(
            control_panelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(control_panelLayout.createSequentialGroup()
                .addComponent(project_label, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(java_project)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(cpp_project)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(project_button)
                .addGap(18, 18, 18)
                .addComponent(compile_label, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(java_run)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(java_jar)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(cpp_compile)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(compile_button, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        terminal.setEditable(false);
        terminal.setColumns(20);
        terminal.setRows(5);
        terminal.setFocusable(false);
        terminal.setRequestFocusEnabled(false);
        terminal_wrapper.setViewportView(terminal);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(terminal_wrapper, javax.swing.GroupLayout.DEFAULT_SIZE, 436, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(control_panel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(get_directory, javax.swing.GroupLayout.PREFERRED_SIZE, 51, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(directory_display)))
                .addContainerGap())
            .addComponent(logo_label, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(logo_label, javax.swing.GroupLayout.PREFERRED_SIZE, 81, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(get_directory, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(directory_display))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(terminal_wrapper, javax.swing.GroupLayout.DEFAULT_SIZE, 294, Short.MAX_VALUE)
                    .addComponent(control_panel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );

        logo_label.getAccessibleContext().setAccessibleName("Label");

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void java_projectMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_java_projectMouseClicked
        cpp_project.setSelected(false);
    }//GEN-LAST:event_java_projectMouseClicked

    private void cpp_projectMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_cpp_projectMouseClicked
        java_project.setSelected(false);
    }//GEN-LAST:event_cpp_projectMouseClicked

    private void java_runMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_java_runMouseClicked
        java_jar.setSelected(false);
        cpp_compile.setSelected(false);
    }//GEN-LAST:event_java_runMouseClicked

    private void java_jarMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_java_jarMouseClicked
        java_run.setSelected(false);
        cpp_compile.setSelected(false);
    }//GEN-LAST:event_java_jarMouseClicked

    private void cpp_compileMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_cpp_compileMouseClicked
        java_run.setSelected(false);
        java_jar.setSelected(false);
    }//GEN-LAST:event_cpp_compileMouseClicked

    private void compile_buttonMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_compile_buttonMouseClicked
        if(!(working_directory == null))
        {   
            terminal.setText(null);
            if(java_run.isSelected())
            {

            } else if (java_jar.isSelected())
            {

            } else if (cpp_compile.isSelected())
            {
                try {
                    CompileCpp();
                } catch (InterruptedException ex) {
                    Logger.getLogger(CtrlFreek.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
        } else {
            terminal.append("Please choose a working directory...");
        }
    }//GEN-LAST:event_compile_buttonMouseClicked

    private void get_directoryMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_get_directoryMouseClicked
        int returnVal = file_chooser.showOpenDialog(CtrlFreek.this);
        if (returnVal == JFileChooser.APPROVE_OPTION) {
            working_directory = file_chooser.getSelectedFile();
            directory_display.setText(file_chooser.getSelectedFile().getAbsolutePath());
        } else {
        }
    }//GEN-LAST:event_get_directoryMouseClicked

    private void project_buttonMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_project_buttonMouseClicked
        if(!(working_directory == null))
        {   
            terminal.setText(null);
            if(java_project.isSelected())
            {

            } else if (cpp_project.isSelected())
            {

            }
        } else {
            terminal.append("Please choose a working directory...");
        }
    }//GEN-LAST:event_project_buttonMouseClicked
    
    public void CallCommand(String[] command) throws InterruptedException
    {
        try { 
            CallCommandCatch(command);
        } catch (IOException ex) {
            Logger.getLogger(CtrlFreek.class.getName()).log(Level.SEVERE, null, ex);
        }
    }
    
    public void CallCommandCatch(String[] command) throws IOException, InterruptedException
    {
        Process proc = rt.exec(command, new String[]{}, working_directory);
        proc.waitFor();
        WriteToTerminal(proc);
    }

    public void WriteToTerminal(Process proc) throws IOException
    {
        BufferedReader stdInput = new BufferedReader(new 
            InputStreamReader(proc.getInputStream()));

        BufferedReader stdError = new BufferedReader(new 
            InputStreamReader(proc.getErrorStream()));

        // Read the output from the command
        String s = null;
        while ((s = stdInput.readLine()) != null) {
            terminal.append(s + "\n");
        }

        // Read any errors from the attempted command
        while ((s = stdError.readLine()) != null) {
            terminal.append(s + "\n");
        }
    }
    
    public String getOperatingSystem() {
        String os = System.getProperty("os.name");
        return os;
    }
    
    public void CompileCpp() throws InterruptedException
    {
        terminal.setText(null);
        if(getOperatingSystem().contains("windows"))
        {
            if(new File(working_directory + "/build/win").exists())
            {
                terminal.append("Deleting Windows build folder...");
                CallCommand(new String[]{"rm", "-R", working_directory + "/build/mac"});
            }
            if(new File(working_directory + "/bin/win").exists())
            {
                terminal.append("Deleting Windows bin folder...");
                CallCommand(new String[]{"rm", "-R", working_directory + "/bin/mac"});
            }

            CallCommand(new String[]{drive_letter + ":/Compiling_Tools/winCompile/cmake-3.16.0-rc2-win64-x64/bin/cmake.exe", "-B", "bin/win", "-G", "Visual Studio 16 2019"});
            CallCommand(new String[]{drive_letter + ":/Compiling_Tools/winCompile/cmake-3.16.0-rc2-win64-x64/bin/cmake.exe", "--build", "bin/win", "--config", "Release"});
        } else if (getOperatingSystem().contains("Mac"))
        {
            if(new File(working_directory + "/build/mac").exists())
            {
                terminal.append("Deleting Mac build folder...");
                CallCommand(new String[]{"rm", "-R", working_directory + "/build/mac"});
            }
            if(new File(working_directory + "/bin/mac").exists())
            {
                terminal.append("Deleting Mac bin folder...");
                CallCommand(new String[]{"rm", "-R", working_directory + "/bin/mac"});
            }

            this.setCursor(new Cursor(Cursor.WAIT_CURSOR));
            CallCommand(new String[]{"/Applications/CMake.app/Contents/bin/cmake", "-B", "bin/mac", "-G", "Xcode"});
            CallCommand(new String[]{"/Applications/CMake.app/Contents/bin/cmake", "--build", "bin/mac", "--config", "Release"});
            this.setCursor(new Cursor(Cursor.DEFAULT_CURSOR));
        } else {
            terminal.append("Cannot format, Unknown system...");
        }
    }
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(CtrlFreek.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(CtrlFreek.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(CtrlFreek.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(CtrlFreek.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            @Override
            public void run() {
                try {
                    new CtrlFreek().setVisible(true);
                } catch (URISyntaxException ex) {
                    Logger.getLogger(CtrlFreek.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton compile_button;
    private javax.swing.JLabel compile_label;
    private javax.swing.JPanel control_panel;
    private javax.swing.JRadioButton cpp_compile;
    private javax.swing.JRadioButton cpp_project;
    private javax.swing.JTextField directory_display;
    private javax.swing.JFileChooser file_chooser;
    private javax.swing.JDialog file_chooser_dialogue;
    private javax.swing.JButton get_directory;
    private javax.swing.JRadioButton java_jar;
    private javax.swing.JRadioButton java_project;
    private javax.swing.JRadioButton java_run;
    private javax.swing.JLabel logo_label;
    private javax.swing.JButton project_button;
    private javax.swing.JLabel project_label;
    private javax.swing.JTextArea terminal;
    private javax.swing.JScrollPane terminal_wrapper;
    // End of variables declaration//GEN-END:variables
}
