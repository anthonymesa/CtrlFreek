#
# ControlFreak.py is a script that allows me to control EXACTLY how my programs
# are compiled. Essentially, all it does is automate the command line with
# arguments based on the local file structure
#
# Control Freak - 0.1.0
# Anthony Mesa
# 

from subprocess import Popen
import os
import time
import platform
import glob

#---------------------------------------------------------

#set your paths here

sources = "src/*.java"
destination = "bin"

#---------------------------------------------------------
#libList is generated by all of the jars in the lib folder
libList = glob.glob('lib/*.jar')

print("------------------------------------------------------")
print("----------------------CONTROL-------------------------")
print("-----------------------FREAK--------------------------")
print("------------------------------------------------------")
print("")

#changes the argument syntax based on the platform being used
if platform.system() == "Windows":
  print("Formatting for Windows OS")
  osBreak = ";"
elif platform.system() == "Darwin":
  print("Formatting for Mac OS")
  osBreak = ":"
else:
  print("Cannont format, Unknown System")

#sets compileLib and runLib arguments
compileLib = ""
for each in libList:
    compileLib += (each + osBreak)
runLib = compileLib + "bin"

#prints arguments to screen
print("")
print("Libraries: " + compileLib)
print("")
print("Running Libs: " + runLib)
print("")

#checks if last classes exist, and if so, removes them before compiling
if os.path.exists("bin/Calendera.class"):
  os.remove("bin/Calendera.class")
  print("Bin cleared, compiling...")
else:
  print("Bin empty, compiling...")

#compiles with arguments
Popen(["javac", sources, "-cp", compileLib, "-d", destination])
print("Compiled succesfully, running in...")

#I set it to wait for 3 seconds because the script would try to run the class
# before it was finished compiling
time.sleep(1)
print("1...")
time.sleep(1)
print("2...")
time.sleep(1)
print("3...")

#checks if there is a class available in the bin folder, if so, it runs it
# with arguments
if os.path.exists("bin/Calendera.class"):
  Popen(["java", "-cp", runLib, "Calendera"])
else:
  print("Project wasn't compiled fast enough.")
